name: Publish Prod

on:
  workflow_dispatch:  

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x' 

      - name: Restore dependencies
        run: dotnet restore src/GroupDocs.Conversion.Cli/GroupDocs.Conversion.Cli.csproj

      - name: Build
        run: dotnet build --configuration Release --no-restore src/GroupDocs.Conversion.Cli/GroupDocs.Conversion.Cli.csproj

      - name: Pack Nuget
        run: dotnet pack --include-symbols -p:SymbolPackageFormat=snupkg --no-build -c Release src/GroupDocs.Conversion.Cli/GroupDocs.Conversion.Cli.csproj -o .

      - name: Write cert
        env:
          PFX_IN_BASE64: ${{ secrets.PFX_IN_BASE64 }}
          PFX_PATH: ${{ secrets.PFX_PATH }}
        run: echo "${PFX_IN_BASE64}" | base64 --decode > ${PFX_PATH}
      
      - name: Sign Nuget
        env: 
          PFX_PATH: ${{ secrets.PFX_PATH }}
          PFX_PWD: ${{ secrets.PFX_PWD }}
          PFX_TMS: ${{ secrets.PFX_TMS }}
        run: dotnet nuget sign *.nupkg --certificate-path ${PFX_PATH} --certificate-password ${PFX_PWD} --timestamper ${PFX_TMS} 

      - name: Verify Nuget
        run: dotnet nuget verify *.nupkg

      - name: Remove cert
        env: 
           PFX_PATH: ${{ secrets.PFX_PATH }}
        run: rm $PFX_PATH
        
      - name: Publish Nuget
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_API_KEY_PROD }}
        run: dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k ${NUGET_TOKEN} --skip-duplicate         

      - name: Publish distributable (Windows)
        run: dotnet publish --configuration Release -p:PublishSingleFile=false -p:RuntimeIdentifier=win-x64 --self-contained --output ./publish/win

      #- name: Publish distributable (Linux)
      #  run: dotnet publish --configuration Release -p:PublishSingleFile=false -p:RuntimeIdentifier=linux-x64 --self-contained --output ./publish/linux

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distributable
          path: ./publish

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/win
          asset_name: windows-distributable
          asset_content_type: application/zip

      # - name: Upload Release Asset (Linux)
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./publish/linux
      #     asset_name: linux-distributable
      #     asset_content_type: application/zip
